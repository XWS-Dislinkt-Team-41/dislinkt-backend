version: "3.8"

services:

  auth_service:
    image: auth_service
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    restart: on-failure
    environment:
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
    depends_on:
      - auth_db
    networks:
      - network
    
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    depends_on:
      - user_db
    networks:
      - network 

  post_service:
    image: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    restart: on-failure
    environment:
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
    depends_on:
      - post_db
    networks:
      - network

  connect_service:
    image: connect_service
    container_name: connect_service
    build:
      context: .
      dockerfile: ./connect_service/Dockerfile
    restart: on-failure
    environment:
      CONNECT_DB_HOST: ${CONNECT_DB_HOST}
      CONNECT_DB_PORT: ${CONNECT_DB_PORT}
      CONNECT_DB_USER: ${CONNECT_DB_USER}
      CONNECT_DB_PASS: ${CONNECT_DB_PASS}
      CONNECT_SERVICE_PORT: ${CONNECT_SERVICE_PORT}
    depends_on:
      - connect_db
    networks:
      - network

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      CONNECT_SERVICE_HOST: ${CONNECT_SERVICE_HOST}
      CONNECT_SERVICE_PORT: ${CONNECT_SERVICE_PORT} 
      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT} 
      JOB_OFFER_SERVICE_HOST: ${JOB_OFFER_SERVICE_HOST}
      JOB_OFFER_SERVICE_PORT: ${JOB_OFFER_SERVICE_PORT} 
    networks:
      - network

  job_offer_service:
    image: job_offer_service
    container_name: job_offer_service
    build:
      context: .
      dockerfile: ./job_offer_service/Dockerfile
    restart: on-failure
    environment:
      JOB_OFFER_DB_HOST: ${JOB_OFFER_DB_HOST}
      JOB_OFFER_DB_PORT: ${JOB_OFFER_DB_PORT}
      JOB_OFFER_SERVICE_PORT: ${JOB_OFFER_SERVICE_PORT}
    depends_on:
      - job_offer_db
    networks:
      - network 

  post_db:
    image: mongo
    container_name: post_db
    environment:
      - PUID=1000
      - PGID=1000
    ports:
      - 27017:27017
    restart: unless-stopped
    networks:
      - network
  
  auth_db:
    image: mongo
    container_name: auth_db
    environment:
      - PUID=1000
      - PGID=1000
    restart: unless-stopped
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network 

  connect_db:
    image: neo4j
    container_name: connect_db
    environment:
      NEO4J_AUTH: ${CONNECT_DB_USER}/${CONNECT_DB_PASS}
    restart: on-failure
    ports:
      - ${CONNECT_DB_HTTP_PORT}:${CONNECT_DB_HTTP_PORT}
      - ${CONNECT_DB_PORT}:${CONNECT_DB_PORT}
    networks:
      - network

  job_offer_db:
    image: mongo
    container_name: job_offer_db
    restart: on-failure
    networks:
      - network 

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge
